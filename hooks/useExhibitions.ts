"use client";
import { ExhibitionStatus } from "@/types/exhibition";
import { slugify } from "@/utils/slugify";
import { useCallback, useState } from "react";

// –ª–æ–∫–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤–∏—Å—Ç–∞–≤–∫–∞–º–∏ –≤ –∞–¥–º—ñ–Ω—Ü—ñ
export interface AdminExhibition {
  id: string; // —Ç–∏–º—á–∞—Å–æ–≤–∏–π ID –¥–ª—è –Ω–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
  slug: string;
  title: string;
  emoji: string;
  color: string; // –∫–æ–ª—ñ—Ä –±–∞–Ω–µ—Ä–∞
  description: string; // –º–∞–ø –Ω–∞ short_description
  content: string; // –º–∞–ø –Ω–∞ content_md
  startDate?: string; // –º–∞–ø –Ω–∞ start_date
  endDate: string; // –º–∞–ø—É—î–º–æ –Ω–∞ end_date
  status: ExhibitionStatus;
  createdAt: string;
  updatedAt: string;
}

const nowISO = () => new Date().toISOString();

function ensureUniqueSlug(
  existing: AdminExhibition[],
  base: string,
  currentId?: string
) {
  const normalized = slugify(base);
  let candidate = normalized || `exhibition-${Date.now()}`;
  let i = 2;
  while (
    existing.some(
      (e) => e.slug === candidate && (currentId ? e.id !== currentId : true)
    )
  ) {
    candidate = `${normalized}-${i++}`;
  }
  return candidate;
}

const initialExhibitions: AdminExhibition[] = [
  {
    id: "pepe",
    slug: "pepe",
    title: "–ï–≤–æ–ª—é—Ü—ñ—è –ü–µ–ø–µ",
    emoji: "üê∏",
    color: "green",
    description:
      "–í—ñ–¥ –∫–æ–º—ñ–∫—Å—É –¥–æ —Å–≤—ñ—Ç–æ–≤–æ–≥–æ —Ñ–µ–Ω–æ–º–µ–Ω—É. –Ü—Å—Ç–æ—Ä—ñ—è –Ω–∞–π–≤—ñ–¥–æ–º—ñ—à–æ—ó –∂–∞–±–∏ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É.",
    startDate: "",
    endDate: "",
    content:
      "# –ü–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n\n–ü–µ–ø–µ –ñ–∞–±–∞ –≤–ø–µ—Ä—à–µ –∑'—è–≤–∏–≤—Å—è —É 2005 —Ä–æ—Ü—ñ...",
    status: "draft",
    createdAt: nowISO(),
    updatedAt: nowISO(),
  },
  {
    id: "2024",
    slug: "2024",
    title: "–ö—Ä–∞—â—ñ –º–µ–º–∏ 2024",
    emoji: "üòÇ",
    color: "yellow",
    description: "–í—ñ—Ä—É—Å–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, —è–∫–∏–π –ø—ñ–¥–∫–æ—Ä–∏–≤ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ —Ü—å–æ–≥–æ —Ä–æ–∫—É.",
    startDate: "2024-01-05",
    endDate: "2024-12-31",
    content: "# –¢–æ–ø-–º–µ–º–∏ —Ä–æ–∫—É\n\n2024 —Ä—ñ–∫ –±—É–≤ –Ω–∞—Å–∏—á–µ–Ω–∏–π –≤—ñ—Ä—É—Å–Ω–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º...",
    status: "published",
    createdAt: nowISO(),
    updatedAt: nowISO(),
  },
  {
    id: "space",
    slug: "space",
    title: "–ú–µ–º–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å",
    emoji: "üöÄ",
    color: "blue",
    description: '–í—ñ–¥ "Houston, we have a problem" –¥–æ SpaceX –º–µ–º—ñ–≤.',
    startDate: "2025-01-10",
    endDate: "2025-03-31",
    content:
      "# –ö–ª–∞—Å–∏—á–Ω—ñ –∫–æ—Å–º—ñ—á–Ω—ñ –º–µ–º–∏\n\n–Ü—Å—Ç–æ—Ä—ñ—è –∫–æ—Å–º—ñ—á–Ω–∏—Ö –º–µ–º—ñ–≤ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è...",
    status: "archived",
    createdAt: nowISO(),
    updatedAt: nowISO(),
  },
];

export function useExhibitions() {
  const [exhibitions, setExhibitions] =
    useState<AdminExhibition[]>(initialExhibitions);

  const create = useCallback(() => {
    const id = `new-${Date.now()}`;
    const base: AdminExhibition = {
      id,
      slug: id,
      title: "",
      emoji: "",
      color: "green",
      description: "",
      startDate: "",
      endDate: "",
      content: "",
      status: "draft",
      createdAt: nowISO(),
      updatedAt: nowISO(),
    };
    setExhibitions((prev) => [...prev, base]);
    return id;
  }, []);

  const update = useCallback((id: string, patch: Partial<AdminExhibition>) => {
    setExhibitions((prev) =>
      prev.map((e) => {
        if (e.id !== id) return e;
        const next: AdminExhibition = { ...e, ...patch, updatedAt: nowISO() };
        if ("title" in patch && e.status === "draft") {
          const currentSlug = next.slug;
          const generatedFromOldTitle = slugify(e.title);
          const looksAuto =
            currentSlug === generatedFromOldTitle ||
            currentSlug.startsWith(generatedFromOldTitle + "-");
          if (looksAuto) {
            next.slug = ensureUniqueSlug(prev, next.title || "", id);
          }
        }
        return next;
      })
    );
  }, []);

  const regenerateSlugFromTitle = useCallback((id: string) => {
    setExhibitions((prev) =>
      prev.map((e) =>
        e.id === id
          ? {
              ...e,
              slug: ensureUniqueSlug(prev, e.title, id),
              updatedAt: nowISO(),
            }
          : e
      )
    );
  }, []);

  const setStatus = useCallback(
    (id: string, status: ExhibitionStatus) => {
      update(id, { status });
    },
    [update]
  );

  const remove = useCallback((id: string) => {
    setExhibitions((prev) => prev.filter((e) => e.id !== id));
  }, []);

  return {
    exhibitions,
    create,
    update,
    regenerateSlugFromTitle,
    setStatus,
    remove,
  };
}
